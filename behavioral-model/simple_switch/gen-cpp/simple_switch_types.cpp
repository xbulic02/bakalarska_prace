/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "simple_switch_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace sswitch_runtime {

int _kMirroringOperationErrorCodeValues[] = {
  MirroringOperationErrorCode::SESSION_NOT_FOUND
};
const char* _kMirroringOperationErrorCodeNames[] = {
  "SESSION_NOT_FOUND"
};
const std::map<int, const char*> _MirroringOperationErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kMirroringOperationErrorCodeValues, _kMirroringOperationErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const MirroringOperationErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _MirroringOperationErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _MirroringOperationErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


MirroringSessionConfig::~MirroringSessionConfig() throw() {
}


void MirroringSessionConfig::__set_port(const int32_t val) {
  this->port = val;
__isset.port = true;
}

void MirroringSessionConfig::__set_mgid(const int32_t val) {
  this->mgid = val;
__isset.mgid = true;
}
std::ostream& operator<<(std::ostream& out, const MirroringSessionConfig& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MirroringSessionConfig::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mgid);
          this->__isset.mgid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MirroringSessionConfig::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MirroringSessionConfig");

  if (this->__isset.port) {
    xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->port);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mgid) {
    xfer += oprot->writeFieldBegin("mgid", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->mgid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MirroringSessionConfig &a, MirroringSessionConfig &b) {
  using ::std::swap;
  swap(a.port, b.port);
  swap(a.mgid, b.mgid);
  swap(a.__isset, b.__isset);
}

MirroringSessionConfig::MirroringSessionConfig(const MirroringSessionConfig& other0) {
  port = other0.port;
  mgid = other0.mgid;
  __isset = other0.__isset;
}
MirroringSessionConfig& MirroringSessionConfig::operator=(const MirroringSessionConfig& other1) {
  port = other1.port;
  mgid = other1.mgid;
  __isset = other1.__isset;
  return *this;
}
void MirroringSessionConfig::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MirroringSessionConfig(";
  out << "port="; (__isset.port ? (out << to_string(port)) : (out << "<null>"));
  out << ", " << "mgid="; (__isset.mgid ? (out << to_string(mgid)) : (out << "<null>"));
  out << ")";
}


InvalidMirroringOperation::~InvalidMirroringOperation() throw() {
}


void InvalidMirroringOperation::__set_code(const MirroringOperationErrorCode::type val) {
  this->code = val;
}
std::ostream& operator<<(std::ostream& out, const InvalidMirroringOperation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InvalidMirroringOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->code = (MirroringOperationErrorCode::type)ecast2;
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidMirroringOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InvalidMirroringOperation");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidMirroringOperation &a, InvalidMirroringOperation &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.__isset, b.__isset);
}

InvalidMirroringOperation::InvalidMirroringOperation(const InvalidMirroringOperation& other3) : TException() {
  code = other3.code;
  __isset = other3.__isset;
}
InvalidMirroringOperation& InvalidMirroringOperation::operator=(const InvalidMirroringOperation& other4) {
  code = other4.code;
  __isset = other4.__isset;
  return *this;
}
void InvalidMirroringOperation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidMirroringOperation(";
  out << "code=" << to_string(code);
  out << ")";
}

const char* InvalidMirroringOperation::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidMirroringOperation";
  }
}

} // namespace
